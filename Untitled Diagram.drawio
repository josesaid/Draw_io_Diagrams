<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36" version="28.2.3">
  <diagram name="Page-1" id="8CwPI5SdaAiIkATkHbjW">
    <mxGraphModel dx="2258" dy="1920" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <UserObject label="# REST API Architecture Diagram for Draw.io with AWS Icons&#xa;&#xa;## Overview&#xa;This document describes how to create a diagram in Draw.io using official AWS Architecture Icons for a REST API architecture. The architecture includes a user accessing a load balancer, API Gateway, microservices (Productos and Roles) in Amazon EKS, Amazon MSK (Kafka), DynamoDB, and supporting AWS services (Cognito, S3, Secrets Manager, CloudWatch), all within a VPC. The diagram emphasizes scalability with auto-scaling annotations.&#xa;&#xa;## Components and AWS Icons&#xa;- **User**: General → Person icon.&#xa;- **VPC**: AWS Networking → VPC shape (encloses all components).&#xa;  - **Public Subnet**: General → Dashed Rectangle (contains ALB, API Gateway).&#xa;  - **Private Subnet**: General → Dashed Rectangle (contains EKS, MSK, DynamoDB, etc.).&#xa;- **Application Load Balancer (ALB)**: AWS Networking &amp; Content Delivery → Elastic Load Balancing.&#xa;- **API Gateway**: AWS Application Integration → API Gateway.&#xa;- **Amazon EKS**: AWS Compute → Elastic Kubernetes Service.&#xa;  - **Productos Microservice**: AWS Compute → EC2 (inside EKS).&#xa;  - **Roles Microservice**: AWS Compute → EC2 (inside EKS).&#xa;- **Amazon MSK**: AWS Application Integration → Managed Streaming for Apache Kafka.&#xa;- **DynamoDB**: AWS Database → DynamoDB.&#xa;- **Cognito**: AWS Security, Identity, &amp; Compliance → Cognito.&#xa;- **S3**: AWS Storage → S3.&#xa;- **Secrets Manager**: AWS Security, Identity, &amp; Compliance → Secrets Manager.&#xa;- **CloudWatch**: AWS Management &amp; Governance → CloudWatch.&#xa;&#xa;## Connections&#xa;- **User → ALB**: HTTPS (solid arrow).&#xa;- **ALB → API Gateway**: HTTPS (solid arrow).&#xa;- **API Gateway → Cognito**: Authenticate (solid arrow).&#xa;- **API Gateway → Productos MS**: REST (solid arrow, through EKS).&#xa;- **Productos MS → DynamoDB**: Query (solid arrow).&#xa;- **Productos MS → MSK**: Publish (Topic: verificar-roles) (dashed arrow).&#xa;- **Roles MS → MSK**: Subscribe (Topic: verificar-roles) (dashed arrow).&#xa;- **Roles MS → DynamoDB**: Query (solid arrow).&#xa;- **Roles MS → MSK**: Publish (Topic: respuesta-roles) (dashed arrow).&#xa;- **Productos MS → MSK**: Subscribe (Topic: respuesta-roles) (dashed arrow).&#xa;- **Productos MS → S3**: Store/Retrieve Assets (solid arrow).&#xa;- **Productos MS → Secrets Manager**: Fetch Credentials (solid arrow).&#xa;- **Roles MS → Secrets Manager**: Fetch Credentials (solid arrow).&#xa;- **Productos MS → CloudWatch**: Metrics/Logs (solid arrow).&#xa;- **Roles MS → CloudWatch**: Metrics/Logs (solid arrow).&#xa;- **EKS → CloudWatch**: Auto-scaling Metrics (solid arrow).&#xa;- **MSK → CloudWatch**: Metrics (solid arrow).&#xa;- **DynamoDB → CloudWatch**: Metrics (solid arrow).&#xa;&#xa;## Scalability Annotations&#xa;- **EKS**: “Auto-scaling with Horizontal Pod Autoscaler (HPA)” (Text shape).&#xa;- **MSK**: “Auto-scaling Partitions/Brokers” (Text shape).&#xa;- **DynamoDB**: “Auto-scaling Throughput” (Text shape).&#xa;&#xa;## Steps to Create in Draw.io&#xa;1. Open Draw.io and create a blank diagram.&#xa;2. Enable AWS Architecture library (More Shapes → AWS categories).&#xa;3. Drag components to canvas:&#xa;   - User outside VPC.&#xa;   - VPC shape enclosing Public Subnet (ALB, API Gateway) and Private Subnet (EKS, MSK, DynamoDB, etc.).&#xa;   - EKS containing Productos MS and Roles MS (EC2 icons).&#xa;4. Draw connections with labeled arrows (solid for HTTPS/REST, dashed for Kafka).&#xa;5. Add scalability annotations using Text shapes.&#xa;6. Style with AWS default colors and clear labels (font size 12-14).&#xa;7. Export as PNG/SVG/PDF (File → Export As).&#xa;&#xa;## Notes&#xa;- Ensure AWS icons are from the latest library (e.g., AWS 19 or 2021).&#xa;- Adjust canvas size to fit all components (zoom to fit before export).&#xa;- Save the Draw.io file (.drawio) for future edits." link="# REST API Architecture Diagram for Draw.io with AWS Icons&#xa;&#xa;## Overview&#xa;This document describes how to create a diagram in Draw.io using official AWS Architecture Icons for a REST API architecture. The architecture includes a user accessing a load balancer, API Gateway, microservices (Productos and Roles) in Amazon EKS, Amazon MSK (Kafka), DynamoDB, and supporting AWS services (Cognito, S3, Secrets Manager, CloudWatch), all within a VPC. The diagram emphasizes scalability with auto-scaling annotations.&#xa;&#xa;## Components and AWS Icons&#xa;- **User**: General → Person icon.&#xa;- **VPC**: AWS Networking → VPC shape (encloses all components).&#xa;  - **Public Subnet**: General → Dashed Rectangle (contains ALB, API Gateway).&#xa;  - **Private Subnet**: General → Dashed Rectangle (contains EKS, MSK, DynamoDB, etc.).&#xa;- **Application Load Balancer (ALB)**: AWS Networking &amp; Content Delivery → Elastic Load Balancing.&#xa;- **API Gateway**: AWS Application Integration → API Gateway.&#xa;- **Amazon EKS**: AWS Compute → Elastic Kubernetes Service.&#xa;  - **Productos Microservice**: AWS Compute → EC2 (inside EKS).&#xa;  - **Roles Microservice**: AWS Compute → EC2 (inside EKS).&#xa;- **Amazon MSK**: AWS Application Integration → Managed Streaming for Apache Kafka.&#xa;- **DynamoDB**: AWS Database → DynamoDB.&#xa;- **Cognito**: AWS Security, Identity, &amp; Compliance → Cognito.&#xa;- **S3**: AWS Storage → S3.&#xa;- **Secrets Manager**: AWS Security, Identity, &amp; Compliance → Secrets Manager.&#xa;- **CloudWatch**: AWS Management &amp; Governance → CloudWatch.&#xa;&#xa;## Connections&#xa;- **User → ALB**: HTTPS (solid arrow).&#xa;- **ALB → API Gateway**: HTTPS (solid arrow).&#xa;- **API Gateway → Cognito**: Authenticate (solid arrow).&#xa;- **API Gateway → Productos MS**: REST (solid arrow, through EKS).&#xa;- **Productos MS → DynamoDB**: Query (solid arrow).&#xa;- **Productos MS → MSK**: Publish (Topic: verificar-roles) (dashed arrow).&#xa;- **Roles MS → MSK**: Subscribe (Topic: verificar-roles) (dashed arrow).&#xa;- **Roles MS → DynamoDB**: Query (solid arrow).&#xa;- **Roles MS → MSK**: Publish (Topic: respuesta-roles) (dashed arrow).&#xa;- **Productos MS → MSK**: Subscribe (Topic: respuesta-roles) (dashed arrow).&#xa;- **Productos MS → S3**: Store/Retrieve Assets (solid arrow).&#xa;- **Productos MS → Secrets Manager**: Fetch Credentials (solid arrow).&#xa;- **Roles MS → Secrets Manager**: Fetch Credentials (solid arrow).&#xa;- **Productos MS → CloudWatch**: Metrics/Logs (solid arrow).&#xa;- **Roles MS → CloudWatch**: Metrics/Logs (solid arrow).&#xa;- **EKS → CloudWatch**: Auto-scaling Metrics (solid arrow).&#xa;- **MSK → CloudWatch**: Metrics (solid arrow).&#xa;- **DynamoDB → CloudWatch**: Metrics (solid arrow).&#xa;&#xa;## Scalability Annotations&#xa;- **EKS**: “Auto-scaling with Horizontal Pod Autoscaler (HPA)” (Text shape).&#xa;- **MSK**: “Auto-scaling Partitions/Brokers” (Text shape).&#xa;- **DynamoDB**: “Auto-scaling Throughput” (Text shape).&#xa;&#xa;## Steps to Create in Draw.io&#xa;1. Open Draw.io and create a blank diagram.&#xa;2. Enable AWS Architecture library (More Shapes → AWS categories).&#xa;3. Drag components to canvas:&#xa;   - User outside VPC.&#xa;   - VPC shape enclosing Public Subnet (ALB, API Gateway) and Private Subnet (EKS, MSK, DynamoDB, etc.).&#xa;   - EKS containing Productos MS and Roles MS (EC2 icons).&#xa;4. Draw connections with labeled arrows (solid for HTTPS/REST, dashed for Kafka).&#xa;5. Add scalability annotations using Text shapes.&#xa;6. Style with AWS default colors and clear labels (font size 12-14).&#xa;7. Export as PNG/SVG/PDF (File → Export As).&#xa;&#xa;## Notes&#xa;- Ensure AWS icons are from the latest library (e.g., AWS 19 or 2021).&#xa;- Adjust canvas size to fit all components (zoom to fit before export).&#xa;- Save the Draw.io file (.drawio) for future edits." id="mdtR5eXkPuUPwV5-Mg7p-2">
          <mxCell style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
            <mxGeometry x="150" y="-80" width="560" height="1020" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
